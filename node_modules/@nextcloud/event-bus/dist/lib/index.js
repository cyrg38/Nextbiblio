"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.emit = exports.unsubscribe = exports.subscribe = void 0;
var ProxyBus_1 = require("./ProxyBus");
var SimpleBus_1 = require("./SimpleBus");
function getBus() {
    if ((typeof window.OC !== 'undefined') && window.OC._eventBus && typeof window._nc_event_bus === 'undefined') {
        console.warn('found old event bus instance at OC._eventBus. Update your version!');
        window._nc_event_bus = window.OC._eventBus;
    }
    // Either use an existing event bus instance or create one
    if (typeof window._nc_event_bus !== 'undefined') {
        return new ProxyBus_1.ProxyBus(window._nc_event_bus);
    }
    else {
        return window._nc_event_bus = new SimpleBus_1.SimpleBus();
    }
}
var bus = getBus();
/**
 * Register an event listener
 *
 * @param name name of the event
 * @param handler callback invoked for every matching event emitted on the bus
 */
function subscribe(name, handler) {
    bus.subscribe(name, handler);
}
exports.subscribe = subscribe;
/**
 * Unregister a previously registered event listener
 *
 * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.
 *
 * @param name name of the event
 * @param handler callback passed to `subscribed`
 */
function unsubscribe(name, handler) {
    bus.unsubscribe(name, handler);
}
exports.unsubscribe = unsubscribe;
/**
 * Emit an event
 *
 * @param name name of the event
 * @param event event payload
 */
function emit(name, event) {
    bus.emit(name, event);
}
exports.emit = emit;
