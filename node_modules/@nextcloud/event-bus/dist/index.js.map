{"version":3,"sources":["../lib/index.ts"],"names":["getBus","window","OC","_eventBus","_nc_event_bus","console","warn","ProxyBus","SimpleBus","bus","subscribe","name","handler","unsubscribe","emit","event"],"mappings":";;;;;;;;;AACA;;AACA;;AASA,SAASA,MAAT,GAA4B;AACxB,MAAK,OAAOC,MAAM,CAACC,EAAd,KAAqB,WAAtB,IAAsCD,MAAM,CAACC,EAAP,CAAUC,SAAhD,IAA6D,OAAOF,MAAM,CAACG,aAAd,KAAgC,WAAjG,EAA8G;AAC1GC,IAAAA,OAAO,CAACC,IAAR,CAAa,oEAAb;AACAL,IAAAA,MAAM,CAACG,aAAP,GAAuBH,MAAM,CAACC,EAAP,CAAUC,SAAjC;AACH,GAJuB,CAMxB;;;AACA,MAAI,OAAOF,MAAM,CAACG,aAAd,KAAgC,WAApC,EAAiD;AAC7C,WAAO,IAAIG,kBAAJ,CAAaN,MAAM,CAACG,aAApB,CAAP;AACH,GAFD,MAEO;AACH,WAAOH,MAAM,CAACG,aAAP,GAAuB,IAAII,oBAAJ,EAA9B;AACH;AACJ;;AAED,IAAMC,GAAG,GAAGT,MAAM,EAAlB;AAEA;;;;;;;AAMO,SAASU,SAAT,CAAmBC,IAAnB,EAAiCC,OAAjC,EAAkE;AACrEH,EAAAA,GAAG,CAACC,SAAJ,CAAcC,IAAd,EAAoBC,OAApB;AACH;AAED;;;;;;;;;;AAQO,SAASC,WAAT,CAAqBF,IAArB,EAAmCC,OAAnC,EAAoE;AACvEH,EAAAA,GAAG,CAACI,WAAJ,CAAgBF,IAAhB,EAAsBC,OAAtB;AACH;AAED;;;;;;;;AAMO,SAASE,IAAT,CAAcH,IAAd,EAA4BI,KAA5B,EAAiD;AACpDN,EAAAA,GAAG,CAACK,IAAJ,CAASH,IAAT,EAAeI,KAAf;AACH","sourcesContent":["import { EventBus } from \"./EventBus\"\nimport { ProxyBus } from \"./ProxyBus\"\nimport { SimpleBus } from \"./SimpleBus\"\n\ndeclare global {\n    interface Window {\n        OC: any\n        _nc_event_bus: any\n    }\n}\n\nfunction getBus(): EventBus {\n    if ((typeof window.OC !== 'undefined') && window.OC._eventBus && typeof window._nc_event_bus === 'undefined') {\n        console.warn('found old event bus instance at OC._eventBus. Update your version!')\n        window._nc_event_bus = window.OC._eventBus\n    }\n\n    // Either use an existing event bus instance or create one\n    if (typeof window._nc_event_bus !== 'undefined') {\n        return new ProxyBus(window._nc_event_bus)\n    } else {\n        return window._nc_event_bus = new SimpleBus()\n    }\n}\n\nconst bus = getBus()\n\n/**\n * Register an event listener\n *\n * @param name name of the event\n * @param handler callback invoked for every matching event emitted on the bus\n */\nexport function subscribe(name: string, handler: (string) => void): void {\n    bus.subscribe(name, handler)\n}\n\n/**\n * Unregister a previously registered event listener\n *\n * Note: doesn't work with anonymous functions (closures). Use method of an object or store listener function in variable.\n *\n * @param name name of the event\n * @param handler callback passed to `subscribed`\n */\nexport function unsubscribe(name: string, handler: (string) => void): void {\n    bus.unsubscribe(name, handler)\n}\n\n/**\n * Emit an event\n *\n * @param name name of the event\n * @param event event payload\n */\nexport function emit(name: string, event: object): void {\n    bus.emit(name, event)\n}\n"],"file":"index.js"}